class Solution {
    // 思路
    // 其实贪心和动态规划很容易混在一起，在面试中，我们应该本着能用贪心就用贪心，贪心解决不了再考虑用动态规划。 毕竟贪心更容易理解，并快速写出代码。

    // 刚看到本题一开始可能想：当前位置元素如果是3，我究竟是跳一步呢，还是两步呢，还是三步呢，究竟跳几步才是最优呢？

    // 其实如果本题是要求只能跳元素数值大小的个数，不能多也不能少，问是否达到终点，那么一定要用动态规划了。

    // 但本题其实我们就看跳到的范围能否覆盖终点，就可以了。

    // 那么我们每次取最大的覆盖范围，看最后能否覆盖终点。
    public boolean canJump(int[] nums) {
        // reachedEnd
        if (nums == null) {
            return false;
        }
        int reachedEnd = nums.length - 1;
        // loop
        for(int i=nums.length-1;i>=0;i--) {
            // loop condition: arr[i]+i>=reachedEnd
            if (nums[i]+i>=reachedEnd) {
                reachedEnd = i;
            }
        }
        return reachedEnd == 0;
    }
}
